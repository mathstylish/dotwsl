#!/bin/sh

function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.git" 
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function start-docker() {
  if [[ ! -x "$(command -v docker)" ]]; then
    echo "Docker isn't installed"
    echo "Run pacman -S docker docker-compose to install"
    return 1
  fi

  if [[ $(docker ps 2> /dev/null) ]]; then
    echo "Docker is already running"
    return 1
  fi

  DOCKER_DISTRO="Arch"
  DOCKER_DIR=/mnt/wsl/shared-docker
  DOCKER_SOCK="$DOCKER_DIR/docker.sock"
  export DOCKER_HOST="unix://$DOCKER_SOCK"
  if [ ! -S "$DOCKER_SOCK" ]; then
    mkdir -pm o=,ug=rwx "$DOCKER_DIR"
    chgrp docker "$DOCKER_DIR"
    /mnt/c/Windows/System32/wsl.exe -d $DOCKER_DISTRO sh -c "nohup sudo -b dockerd < /dev/null > $DOCKER_DIR/dockerd.log 2>&1"
    echo "Docker started successfully"
    return 0
  fi
}

function stop-docker() {
  if [[ ! -x "$(command -v docker)" ]]; then
    echo "Docker isn't installed"
    echo "Run pacman -S docker docker-compose to install"
    return 1
  fi

  if [[ ! $(docker ps 2> /dev/null) ]]; then
    echo "Docker is already stopped"
    return 1
  fi

  containers=($(docker ps -aq | xargs))

  if [[ ${#containers} -eq 0 ]]; then
    echo "There are no containers running"
    echo -n "Do you want to stop dockerd? y/n: "
    read -r opt
    if [[ $opt == "y" ]]; then
      kill $(ps aux | grep docker) > /dev/null 2>&1
      echo "Docker stopped successfully"
      return 0
      echo "Operation cancelled"
    else
      return 0
    fi
  fi

  echo "Running containers: [$containers]"

  while true; do
    echo "What do you want to do?"
    echo -n "(1) Stop and remove all containers\n(2) Stop all containers\n(3) Remove all containers\n(4) Stop and remove all containers and stop dockerd\n(5) Exit\noption: "
    read -r opt
    case $opt in
      [1]* ) docker ps -aq | xargs docker stop | xargs docker rm; echo "Success"; break;;
      [2]* ) docker ps -aq | xargs docker stop; echo "Success"; break;;
      [3]* ) docker ps -aq | xargs docker rm; echo "Success"; break;;
      [4]* ) docker ps -aq | xargs docker stop | xargs docker rm && kill $(ps aux | grep docker) > /dev/null 2>&1; echo "Success"; return 0;;
      [5]* ) echo "Operation cancelled";break;;
      * ) echo "Please, choose one or press ctrl+c to exit"
    esac
  done
}

function cgu() { # change my ssh identity key if i need to push to other git account
  ln -sf $HOME/.ssh/$1 $HOME/.ssh/current
}

function cpf () { # copy content to clipboard
  cat $1 | clip.exe
}

function gc() {
  PROTOCOL=$1
  USER_REPO=$2
  CLONEDIR=$3

  if [[ -z "$PROTOCOL" ]]; then
    echo "gc <protocol> <username/repo> <path (optional)>"
  fi

  if [ "$PROTOCOL" = "ssh" ]; then
    git clone "git@github.com:$USER_REPO.git" $CLONEDIR
  fi

  if [ "$PROTOCOL" = "https" ]; then
    git clone "https://github.com/$USER_REPO.git" $CLONEDIR
  fi
}

## string useful
function str2hex() {
  (( $# < 1 )) && return 1

	case "$1" in
		"-x")
			echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/../\\x&/g'
			echo
			;;
		"-0x")
			echo -n "$2" | hexdump -ve '/1 "0x%02x "' | sed 's/\(.*\) /\1/'
			echo
			;;
		"-c")
			echo -n '{ '
			echo -n "$2" | hexdump -ve '/1 "0x%02x, "' | sed 's/\(.*\), /\1/'
			echo ' }'
			;;
        *)
			echo -n "$1" | hexdump -ve '/1 "%02x "' | sed 's/\(.*\) /\1/'
			echo
			;;
	esac}

str2dec() {
	(( $# < 1 )) && return 1

	echo -n "$1" | hexdump -ve '/1 "%d "' | sed 's/\(.*\) /\1/'
	echo
}
